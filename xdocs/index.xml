<?xml version="1.0"?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
-->

<document>

  <properties>
    <title>Parser Component</title>
    <author email="epugh@opensourceconnections.com">Eric Pugh</author>
  </properties>

  <body>

  <section name="Overview">
    <p>
     This Service functions as a repository for Parser components.
   </p>

    <p>
      It is written
      for use in Turbine but it can be used in any container compatible
      with Avalon's ECM container.
    </p>
  </section>

<section name="Configuration">

    <p>
      First, here is the role configuration.
    </p>

    <source>
    <![CDATA[
    <role
        name="org.apache.fulcrum.parser.ParserService"
        shorthand="parser"
        default-class="org.apache.fulcrum.parser.DefaultParserService"/>
    ]]>
    </source>

      <p>
        And here is the configuration:
      </p>
    <source>

    <![CDATA[
    <parser>
        <parameterEncoding>utf-8</parameterEncoding>
        <automaticUpload>true</automaticUpload>
    </parser>
    ]]>
    </source>

  </section>

  <section name="Usage">
    <p>
    You get a parser from the service like this:
    </p>

    <source><![CDATA[
    // Get a ValueParser instance
    ValueParser parser = (ValueParser) parserService.getParser(BaseValueParser.class);

    parser.add(...);
    Double d = parser.getDoubleObject(...);
    
    // Return the instance to the service
    parserService.putParser(parser);
    ]]></source>

    <p>
    Parsers are pooled inside the service. You can use this service to manage any types of
    parsers, you just need to provide the class you wnat to manage. If the parser class 
    implements LogEnabled it will get an (Avalon) logger injected. If the parser class 
    implements ParserServiceSupport it will get an instance of this service injected. 
    </p>

  </section>

</body>
</document>
